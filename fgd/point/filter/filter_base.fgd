// The base filter class is actually an entity you can use.
@FilterClass base(BaseEntityPoint) 
	autovis(Logic, Filters)
	color(0 255 0)
	iconsprite("editor/ficool2/filter_base.vmt")
= filter_base : "Base filter, which all other filters are based off of. This filter passes any entity whatsoever."
	[
	negated(choices) : "Filter Mode" : 0 : "If set to Allow, only entities who match the criteria will pass the filter. If set to Disallow, only entities who do NOT match the criteria will pass the filter." =
		[
		0: "Allow entities that match criteria"
		1: "Disallow entities that match criteria"
		]
	negated[engine](boolean) : "Filter Mode" : 0

	PassCallerWhenTested(boolean) : "Pass caller when tested" : 0 : "When tested with TestActivator or TestEntity, " +
		"this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller."

	// Inputs
	input TestActivator(void) : "Test the activator against the filter and fires OnPass or OnFail output."
	input TestEntity(target_destination) : "Tests the target entity against the specified entity and fires the OnPass or OnFail output."
	input SetField(string) : "Sets this filter's primary test criteria. (e.g. the name to test against the activator)"

	// Outputs
	output OnPass(void) : "Fired in response to TestActivator input if the activator passes the filter."
	output OnFail(void) : "Fired in response to TestActivator input if the activator fails to pass the filter."
	]
