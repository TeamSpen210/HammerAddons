// Switch the model helper depending on game.
@BaseClass appliesto(P1) studioprop("models/props/turret_01.mdl")
	= _npc_portal_turret_floor_p1_mdl []
@BaseClass appliesto(P2) studioprop()
	= _npc_portal_turret_floor_p2_mdl []

@PointClass base(BaseNPC, _npc_portal_turret_floor_p1_mdl, _npc_portal_turret_floor_p2_mdl) 
	appliesto(P1, P2, -STANLEY) 
	autovis(Entities, NPCs, Portal Turret)
	frustum(_frustum_fov, _frustum_near, TurretRange, _frustum_color, -1)
= npc_portal_turret_floor: "Aperture Science Sentry Turret."
	[
	damageforce(boolean) : "Damage Pushes Player" : 0 : "Being hit by this turret will push the player back."

	spawnflags(flags) : "spawnflags" =
		[
		32: "Start Active" : 0
		64: "Start Inactive" : 0
		128: "Fast Retire" : 0
		256: "Out of Ammo" : 0
		// Probably does nothing...
		512: "Citizen modified (Friendly)" : 0 [P1]
		]

	modelindex[engine](integer) : "Model" : 0 
	modelindex[P2](choices) : "Model" : 0 : "Which model the turret uses. The skeleton turret is still functional." =
		[
		0: "Normal"
		1: "Custom Model"
		2: "Box"
		3: "Backwards"
		4: "Skeleton"
		]

	skinnumber[engine](integer) : "Skin" : 0 
	skinnumber[P1](integer) readonly: "Skin" : 0 : "Which skin to use for this turret. Aperture Turrets have no variants."
	skinnumber[P2](choices) : "Skin" : 0 : "Set the skin used for the turret. Only useful on normal (for a destroyed variant) or custom turrets." =
		[
		0: "Normal"
		1: "Destroyed"
		]

	gagged[P2](boolean) : "Gag Turret" : 0 : "Turret will not speak any lines."
	usedasactor[P2](boolean) : "Used As Actor" : 0 : "Turret will not run the standard floor turret code so it can be used as an actor."
	pickupenabled[P2](boolean) : "Turret Pickup Allowed" : 1 : "Disables pickup by player."
	disablemotion[P2](boolean) : "Disable Motion" : 0 : "Set for turrets that can't move in the world."
	allowshootthroughportals[P2](boolean) : "Allow Shooting Through Portals" : 0 : "Turrets will not try to shoot through portals unless this is set."
	turretrange[P2](float) : "Maximum Range" : 1024 : "How far the turret will be able to see targets."
	loadalternativemodels[P2](boolean) : "Load Defective Models" : 0 : "Should this turret precache the defective models? Needed for late switching."
	usesuperdamagescale[P2](boolean) : "Use Super Damage" : 0 : "Setting this to true will scale the turret's damage by a very large amount."

	collisiontype[engine](integer) : "Collision Type" : 0
	collisiontype[P2](choices) : "Collision Type" : 0 : "Allow collision with the player to be turned off for very special cases." =
		[
		0: "Normal"
		1: "Debris"
		]

	model[engine](studio) : "Custom Model" : "models/npcs/turret/turret.mdl"
	model[P2](choices) : "Custom Model" : "models/npcs/turret/turret.mdl" : "The model to show as in Hammer, or a custom model to use." =
		[
		"models/npcs/turret/turret.mdl": "Normal"
		"models/npcs/turret/turret_boxed.mdl": "Box"
		"models/npcs/turret/turret_backwards.mdl": "Backwards"
		"models/npcs/turret/turret_skeleton.mdl": "Skeleton"
		]

	skin[P2](integer) : "[H] Skin" : 0 : "The skin to show, mainly for the normal model."

	turretrange[P1, !engine](integer) readonly : "<Maximum Range>" : 1500 : "How far the turret will be able to see targets. Always 1500 in Portal 1, but this keyvalue is needed to display the preview."
	_frustum_color[!engine](string) readonly : "<Frustum Color>" : "255 0 0" : "Ignore, needed to color the range preview."

	// Inputs
	input FireBullet(string) : "Causes the turret to instantly fire at the specified entity."
	input Toggle(void) : "Toggle enabled state."
	input Enable(void) : "Enable the turret."
	input Disable(void) : "Disable the turret."
	input DepleteAmmo(void) : "Depletes all the ammo from a turret, causing it to dry-fire."
	input RestoreAmmo(void) : "Restores ammo to a turret, allowing it to fire live rounds again."
	input EnableGagging[P2](void) : "Prevents the turret from speaking any lines."
	input DisableGagging[P2](void) : "Allows the turret to speak again."
	input EnablePickup[P2](void) : "Enables player pickup of the turret."
	input DisablePickup[P2](void) : "Disables player pickup of the turret."
	input SelfDestruct(void) : "Causes the turret to play lines, ignite and then explode."
	input SelfDestructImmediately[P2](void) : "Cause the turret to explode immediately."
	input SetAsBouncePainted[P2](void) : "Force this turret to be painted with bounce paint."
	input EnableMotion[P2](void) : "Enable physics motion."
	input DisableMotion[P2](void) : "Disable physics motion."
	input SetModel[engine](string) : "Was string in P1, now int in P2."
	input SetModel[P2](integer) : "Change the model, where the parameter is an integer from 0-4. Requires the Load Defective Models keyvalue to be true!"

	// Outputs
	output OnDeploy(void) : "Turret has seen the player and is deploying its arms."
	output OnRetire(void) : "Turret has lost sight of the player and is returning to sleep mode."
	output OnTipped(void) : "Turret has been tipped over and 'died'."
	output OnExplode[P2](void) : "Turret has exploded."
	output OnPhysGunPickup(void) : "Turret was picked up by player."
	output OnPhysGunDrop(void) : "Turret was dropped by player."
	output OnPainted[P2](void) : "Fires when the turret is first painted or if repainted by a different color."
	]
