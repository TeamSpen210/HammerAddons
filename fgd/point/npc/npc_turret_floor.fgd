@PointClass base(BaseNPC) 
	appliesto(EP1, EP2, HL2, P1, P2) 
	studioprop("models/combine_turrets/floor_turret.mdl") 
	frustum(90, 1, 1200, 255 0 0, -1)
	autovis(Entities, NPCs, Combine, Floor Turret)
= npc_turret_floor: "Combine Floor Turret"
	[
	// AlyxInteractable in Mapbase
	Hacked[MBase](boolean) : "Start Hacked" : "No" : "Makes this NPC start as if Alyx had hacked it. This causes the NPC to switch sides and might give it a different color."
	input InteractivePowerDown[MBase](void) : "Shutdown this target."
	input Hack[MBase](void) : "Hacks this entity as if Alyx interacted with it."
	output OnAlyxStartedInteraction[MBase](void) : "Fired when Alyx begins to interact with this entity."
	output OnAlyxFinishedInteraction[MBase](void) : "Fired when Alyx has finished interacting with this entity."
	output OnHacked[MBase](void) : "Fires when this entity is hacked, either by Alyx or through the 'Hack' input."

	spawnflags(flags) : "spawnflags" =
		[
		32: "Autostart" : 0
		64: "Start Inactive" : 0
		128: "Fast Retire" : 0
		256: "Out of Ammo" : 0
		512: "Citizen modified (Friendly)" : 0
		1024 : "No Light Sprite" : 0 [MBase]
		]

	skinnumber[!Mbase](integer) : "Skin Number" : 0 : "Which skin to use for this turret. Set to 0 to select randomly."
	skin[MBase](integer) : "Skin Number" : 0 : "Which skin to use for this turret. If a citizen turret, set to 0 to select randomly."

	// Inputs
	input Toggle(void) : "Toggle - If open, close. If closed, open."
	input Enable(void) : "Enable the turret."
	input Disable(void) : "Disable the turret."
	input DepleteAmmo(void) : "Depletes all the ammo from a turret, causing it to dry-fire."
	input RestoreAmmo(void) : "Restores ammo to a turret, allowing it to fire live rounds again."
	input CreateSprite[MBase](void) : "Creates the turret's light sprite if it was previously destroyed."
	input DestroySprite[MBase](void) : "Destroys the turret's light sprite."
	input SelfDestruct(void) : "Causes the turret to warn and then explode."

	// Outputs
	output OnDeploy(void) : "Turret is becoming active and dangerous."
	output OnRetire(void) : "Turret is becoming inactive and harmless."
	output OnTipped(void) : "Turret has been tipped over and is inactive."
	output OnStartTipped[MBase](void) : "Turret has just been tipped over."
	output OnPhysGunPickup(void) : "Picked up with Gravity Gun."
	output OnPhysGunDrop(void) : "Released by Gravity Gun."

	@resources
		[
		// Todo: Pick citizen vs regular?
		model "models/combine_turrets/floor_turret.mdl"
		model "models/combine_turrets/citizen_turret.mdl"
		material "materials/effects/laser1.vmt"  // Citizen only, or always in EZ2.
		material "materials/sprites/glow1.vmt" [+entropyzero2]
		sound "NPC_FloorTurret.AlarmPing"  // Allied to player only (citizen normally, in ez2 non-citizen)
		sound "NPC_Combine.WeaponBash"
		sound "NPC_FloorTurret.Activate"
		sound "NPC_FloorTurret.Alarm"
		sound "NPC_FloorTurret.Alert"
		sound "NPC_FloorTurret.Deploy"
		sound "NPC_FloorTurret.Destruct"
		sound "NPC_FloorTurret.Die"
		sound "NPC_FloorTurret.DryFire"
		sound "NPC_FloorTurret.Move"
		sound "NPC_FloorTurret.Ping"
		sound "NPC_FloorTurret.Retire"
		sound "NPC_FloorTurret.Retract"
		sound "NPC_FloorTurret.ShotSounds"
		break_chunk "MetalChunks" // Spawned when self destructed.
		particle "explosion_turret_break" [+episodic]
		]
	]
