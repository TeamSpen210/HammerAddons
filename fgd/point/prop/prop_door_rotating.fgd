@PointClass base(prop_dynamic_base, Glow) 
	studioprop()
	// Can't have this along with no default model.
	// line(255, 255, 255, targetname, slavename)
= prop_door_rotating: "An entity used to place a door in the world. Uses a special $keyvalues block to automatically define sounds and animations."
	[
	slavename(target_destination) : "Slave Name" : : "The name of any doors that should be slaved to this door " +
		"(i.e. should open when this one opens, and close when this one closes)."

	hardware[engine](integer) : "Hardware Type" : 1
	hardware(choices) : "Hardware Type" : 1 : "Type of lock/handle to use. " +
		"This just changes the second bodygroup, so any value can be used if the model supports it." =
		[
		0: "<None>"
		1: "Lever"
		2: "Push bar"
		3: "Keypad"
		4: "(Mapbase) Combine Lock" [MBase]
		]

	ajarangles(angle) : "Ajar Angles (Pitch Yaw Roll)" : "0 0 0" : "If the door 'Spawn Position' is set to Ajar, " +
		"these are the angles to spawn at, instead of being open or closed."

	spawnpos[engine](integer) : "Spawn Position" : 0
	spawnpos(choices) : "Spawn Position" : 0 =
		[
		0: "Closed"
		1: "Open clockwise"
		2: "Open counter-clockwise"
		3: "Ajar (use Ajar Angles)"
		]

	axis(axis) : "Hinge Axis"
	distance(float) : "Rotation Distance (deg)" : 90 : "The amount, in degrees, that the door should rotate when opened."
	speed(float) : "Speed" : 100 : "The speed at which the door moves."

	soundopenoverride(sound) : "Fully Open Sound" : : "Sound played when the door has finished opening."
	soundcloseoverride(sound) : "Fully Closed Sound" : : "Sound played when the door has finished closing."
	soundmoveoverride(sound) : "Moving Sound" : : "Sound played when the door starts to move."

	opendistoverride[MBase](integer) : "NPC Open Distance" : -1 : "How far away NPCs should move in order to open the door. (default = 64)"
	openfrontactivityoverride[MBase](string) : "NPC Front Open Activity" : "" : "The gesture activity NPCs should play when opening the door from the front."
	openbackactivityoverride[MBase](string) : "NPC Back Open Activity" : "" : "The gesture activity NPCs should play when opening the door from the back."

	returndelay(integer) : "Delay Before close (-1 stay open)" : -1 : "Amount of time, in seconds, after the door has opened before it closes. " +
		"If the value is set to -1, the door never closes itself."

	dmg(integer) : "Damage Inflicted When Blocked" : 0 : "Amount of damage done to entities that block the movement of this door, per frame."
	health(integer) : "Health (0 = Unbreakable)" : 0

	soundlockedoverride(sound) : "Locked Sound" : : "Sound played when the player tries to open the door, and fails because it's locked."
	soundunlockedoverride(sound) : "Unlocked Sound" : : "Sound played when the door is unlocked."

	forceclosed(boolean) : "Force Closed" : "0" : "If set, this door will close no matter what. " +
		"Useful for doors that have to close even if the player tries to block them with objects."

	kickspeed[EZ2](integer) : "Kicked Speed" : 500 : "The speed at which the door moves when kicked by the player."
	
	openonkick[engine](boolean) : "Unlock On Kick" : 1
	openonkick[EZ2](choices) : "Open On Kick" : 1 : "Should this door open when kicked by the player?" =
	[
		0 : "Don't open when kicked"
		1 : "Open when kicked"
	]
	
	unlockonkick[engine](boolean) : "Unlock On Kick" : 0
	unlockonkick[EZ2](choices) : "Unlock On Kick" : 0 : "Should this door unlock when kicked by the player?" =
	[
		0 : "Don't unlock when kicked"
		1 : "Unlock when kicked"
	]

	spawnflags(flags)  =
		[
		// 1: "Starts Open" : 0
		256 : "Start with collision disabled" : 0 [EZ2]
		512: "NPCs Can't Use" : 0 [MBase]
		2048: "Starts locked" : 0
		4096: "Door silent (No sound, and does not alert NPCs)" : 0
		8192: "Use closes" : 1
		16384: "Door silent to NPCS (Does not alert NPCs)" : 0
		32768: "Ignore player +USE" : 0
		524288: "Start Breakable" : 0 [since_CSGO, GMod]
		524288 : "Start Unbreakable" : 0 [L4D, L4D2]
		]

	opendir[engine](integer) : "Open Direction" : 0
	opendir(choices) : "Open Direction" : 0 : "Force the door to open only forwards or only backwards. Both directions is the standard door behavior." =
		[
		0: "Open Both Directions"
		1: "Open Clockwise Only"
		2: "Open Counter-Clockwise Only"
		]

	glowdist[since_CSGO](integer) : "Glow Distance" : 1024
	glowenabled[since_CSGO](boolean) : "Does the prop glow by default?" : 0
	glowcolor[since_CSGO](color255) : "Glow Color (R G B)" : "255 255 255" : "The color of the glow (if enabled)."
	candamageplayer[INFRA](boolean) : "Can Damage Player" : 0 : "If set, this door will kill the player blocking it. Used for the large blast doors in infra_c7_m2_bunker."

	// Inputs
	input Open(void) : "Open the door, if it is not fully open."
	input OpenAwayFrom(string) : "Open the door away from the specified entity."
	input Close(void) : "Close the door, if it is not fully closed."
	input Toggle(void) : "Toggle the door between open and closed."
	input Lock(void) : "Lock the door."
	input Unlock(void) : "Unlock the door."
	input SetRotationDistance(float) : "Set the distance (in degrees) between Open and Closed."
	input SetSpeed(float) : "Set the speed at which the door rotates. 100 is default."
	
	input AllowPlayerUse[MBase](void) : "Allows players to use the door. This just disables the 'Ignore player +USE' spawnflag."
	input DisallowPlayerUse[MBase](void) : "Prevents players from using the door. This just enables the 'Ignore player +USE' spawnflag."
	input SetFullyOpenSound[MBase](string) : "Sets the sound to use when the door is fully open."
	input SetFullyClosedSound[MBase](string) : "Sets the sound to use when the door is fully closed."
	input SetMovingSound[MBase](string) : "Sets the sound to use when the door is moving."
	input SetLockedSound[MBase](string) : "Sets the sound to use when the door is locked."
	input SetUnlockedSound[MBase](string) : "Sets the sound to use when the door is unlocked."

	input MoveToRotationDistance[Gmod, since_P2](float) : "Sets the open distance (in degrees) and moves there."
	input SetGlowEnabled[since_CSGO](void) : "Starts the glow."
	input SetGlowDisabled[since_CSGO](void) : "Stops the glow."
	input SetUnbreakable[L4D, L4D2](void) : "The door can't be broken."
	input SetBreakable[L4D, L4D2](void) : "The door can be broken."
	input SetAnimation[INFRA](string) : "Force the door to play an animation. The parameter should be the name of the animation."
	input SetAnimationNoReset[INFRA](string) : "Force the door to play an animation unless the door " +
		"is already playing the animation. The parameter should be the name of the animation."

	// Outputs
	output OnClose(void) : "Fired when the door is told to close."
	output OnOpen(void) : "Fired when the door is told to open."
	output OnFullyOpen(void) : "Fired when the door reaches the fully open position."
	output OnFullyClosed(void) : "Fired when the door reaches the fully closed position."
	output OnBlockedClosing(void) : "Fired when the door is blocked while closing."
	output OnBlockedOpening(void) : "Fired when the door is blocked while opening."
	output OnUnblockedClosing(void) : "Fired when the door is unblocked while closing."
	output OnUnblockedOpening(void) : "Fired when the door is unblocked while opening."
	output OnLockedUse(void) : "Fired when the player uses the door, but it is locked."
	output OnRotationDone[GMod, since_P2](void) : "Fired when the door arrives at it's goal angle."
	output OnBreak[L4D, L4D2](void) : "Fired when the door changes damage states."
	output OnKicked[EZ2](void) : "(EZ2) Fired when the door is kicked open."

	@resources
		[
		sound "DoorSound.Null"
		func prop_door_rotating
		]
	]
