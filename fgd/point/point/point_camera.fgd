@PointClass base(BaseEntityPoint)
	studioprop("models/editor/camera.mdl") 
	frustum(fov, fogstart, fogend, 255 255 255, -1)
= point_camera: "Camera"
	[
	spawnflags(flags) : "spawnflags" =
		[
		1: "Start Off" : 0
		]

	// Not a texture type, these are managed by code, not on disk!
	rendertarget[engine](string) report: "Render Target" : "_rt_Camera"
	rendertarget[Mesa](choices) report: "Render Target" : "_rt_Camera" =
		[
		"_rt_Camera" : "_rt_Camera"
		"_rt_Camera2" : "_rt_Camera2"
		"_rt_Camera3" : "_rt_Camera3"
		"_rt_Camera4" : "_rt_Camera4"
		"_rt_Camera5" : "_rt_Camera5"
		]	
	RenderTarget[MBase](choices) report: "Render target" : "" : "Makes this camera target a specific RT texture instead of just _rt_Camera, allowing for multiple active point_cameras. " +
		"Monitors for this camera must use materials which draw the target texture." +
		"You can manually type in any RT texture name if you know what you're doing." =
		[
		"_rt_Camera" : "_rt_Camera (default)"
		"_rt_Camera0" : "_rt_Camera0"
		"_rt_Camera1" : "_rt_Camera1"
		"_rt_Camera2" : "_rt_Camera2"
		"_rt_WaterReflection" : "_rt_WaterReflection (requires no nearby water/mirrors)"
		"_rt_WaterRefraction" : "_rt_WaterRefraction (requires no nearby water/mirrors)"
		]

	fov(float) : "FOV" : 90 : "Field of view in degrees"
	usescreenaspectratio(boolean) : "Screen Aspect Ratio" : 0
	fogenable(boolean) : "Fog Enable" : 0
	fogcolor(color255) : "Fog Color" : "0 0 0"
	fogstart(float) : "Fog Start" : 2048 : "The near fog plane."
	fogend(float) : "Fog End" : 4096 : "The far fog/clipping plane."
	fogmaxdensity(float) : "Fog Max Density [0..1]" : 1 : "The maximum fog density. 0=no fog, 1=full fog."

	SkyMode[engine](integer) : "Sky Mode" : 2
	SkyMode[MBase](choices) : "Sky Mode" : 2 : "How to draw the sky through this point_camera." =
		[
		2 : "Draw sky texture"
		1 : "Draw 3D skybox"
		]

	// Inputs
	input ChangeFOV(string) : "Changes camera's FOV over time"
	input SetOnAndTurnOthersOff[-MBase](void) : "Turn the camera on, and turn all other cameras off."
	input SetOnAndTurnOthersOff[+MBase](void) : "Turn the camera on, and turn all other cameras off. Does not affect cameras using different render targets."
	input SetOn(void) : "Turn the camera on."
	input SetOff(void) : "Turn the camera off."
	input SetSkyMode[MBase](integer) : "Sets the sky mode. NOTE: 2 = draw sky texture, 1 = draw 3D skybox!"
	input Activate[since_ASW](void) : "Turn the camera on, activate it and deactivate all other cameras."
	input Deactivate[since_ASW](void) : "Turn the camera off, deactivate it."
	input SetRenderTarget[MBase](string) : "Sets the render target."

	@resources [] // existance of rendertargets is handled by code not files.
	]
