
// TF2 hammer has no worldtext() helper, so replace it with a model
// FIXME: this needs a custom model, vgui_arrows is oriented the wrong way
@BaseClass studio("models/editor/axis_helper_thick.mdl") appliesto(TF2) = _point_worldtext_tf2
[
]

@PointClass base(BaseEntityPoint, _point_worldtext_tf2) 
	appliesto(since_CSGO, TF2BRANCH, GMOD) 
	worldtext() 
= point_worldtext: "An entity that displays a text message oriented in the world, at its origin."
	[
	// since/until are misnomers here, since worldtext was added to CSGO first, more features in TF2/GMOD.
	spawnflags(flags) : "spawnflags" =
		[
		1: "Start Disabled" : 0 [!TF2]
		]

	message(string) : "Entity Message" : "" : "Text Message. English characters and numbers only! Newline characters are accepted."
	textsize(float) : "Text Size" : 10 : "Text Size."
	color[since_CSGO](color255) : "Color" : "255 255 255" : "Color of the text"
	color[until_CSGO](color255) : "Color" : "255 255 255 255" : "Color and opacity of the text"

	font[engine, GMOD](integer) : "Font" : 0
	font[TF2BRANCH](choices) : "Font" : 0 : "The font to use for the text" =
	[
		0 : "TF2 Build"
		1 : "TF2 Build (no outline/shadow)"
		2 : "TF2"
		3 : "TF2 (no outline/shadow)"
		4 : "Liberation Sans"
		5 : "Liberation Sans (no outline/shadow)"
		6 : "TF2 Professor"
		7 : "TF2 Professor (no outline/shadow)"
		8 : "Roboto Mono"
		9 : "Roboto Mono (no outline/shadow)"
		10 : "Roboto Mono (shadow only)"
		11 : "Roboto Mono (green glow, soft edges)"
		12 : "TF2 Build (soft edges)"
	]

	orientation[engine](integer) : "Orientation" : 0
	orientation[until_CSGO](choices) : "Orientation" : 0 : "Text orientation mode. Fixed orientation left aligns the text, the others center align it." =
	[
		0 : "Fixed orientation"
		1 : "Face player"
		2 : "Face player, yaw only"
	]

	textspacingx[TF2BRANCH, GMOD](float) : "Text Spacing X" : 0 : "Spacing between each letter along the X axis. Negative values will invert the text."
	textspacingy[TF2BRANCH, GMOD](float) : "Text Spacing Y" : 0 : "Spacing between each letter along the Y axis. Only used when newlines have been inserted into the text."
	rainbow[TF2BRANCH, GMOD](boolean) : "Rainbow text" : 0 : "Enables rainbow text, overriding colors set elsewhere."

	// Inputs
	input SetEnabled[GMOD](boolean) : "Sets the visibility based on in the input parameter"
	input Enable[!TF2BRANCH](void) : "Start displaying the message text."
	input Disable[!TF2BRANCH](void) : "Stop displaying the message text."
	input SetMessage[since_CSGO](string) : "Set the message text."

	// SDK 25 Inputs
	input SetText[until_CSGO](string) : "Set the message text."
	input SetTextSize[until_CSGO](float) : "Set the message text size. Setting this to 0 will hide the text. Negative values flip the text upside down."
	input SetTextSpacingX[until_CSGO](float) : "Set the spacing between letters along the X axis. Negative values will invert the text."
	input SetTextSpacingY[until_CSGO](float) : "Set the spacing between letters along the Y axis. Only used when newlines are inserted into the text."
	input SetColor[until_CSGO](color255) : "Set the message color"
	input SetFont[TF2BRANCH](integer) : "Set the message font. Accepts values 0-12."
	input SetOrientation[until_CSGO](integer) : "Sets the message orientation type."
	input SetRainbow[until_CSGO](integer) : "Sets rainbow text to be enabled/disabled."

	@resources [
		material "editor/worldtext" [-TF2BRANCH]
		// All are required since SetFont can swap at runtime.
		material "editor/worldtext_1" [+TF2BRANCH]
		material "editor/worldtext_2" [+TF2BRANCH]
		material "editor/worldtext_3" [+TF2BRANCH]
		material "editor/worldtext_4" [+TF2BRANCH]
		material "editor/worldtext_5" [+TF2BRANCH]
		material "editor/worldtext_6" [+TF2BRANCH]
		material "editor/worldtext_7" [+TF2BRANCH]
		material "editor/worldtext_8" [+TF2BRANCH]
		material "editor/worldtext_9" [+TF2BRANCH]
		material "editor/worldtext_10" [+TF2BRANCH]
		material "editor/worldtext_11" [+TF2BRANCH]
		material "editor/worldtext_12" [+TF2BRANCH]
		material "editor/worldtext_13" [+TF2BRANCH]
		]
	]
