@PointClass base(BaseEntityPoint) 
	color(0 100 250) 
	iconsprite("editor/logic_measure_movement.vmt") 
	line(255 255 0, targetname, measureReference) 
	line(255 0 255, targetname, measureTarget, targetname, measureReference) 
	line(255 255 0, targetname, targetReference) 
	line(255 0 255, targetname, target, targetname, TargetReference) 
= logic_measure_movement: "An entity that can measure the movement of an entity relative to another entity and apply that movement to a third entity."
	[
	measuretarget(target_destination) : "Entity to Measure" : : "Entity whose movement you want to measure."
	measurereference(target_destination) : "Measure Reference" : : "The movement of Entity to Measure will be measured relative to this entity."
	target(target_destination) : "Entity to Move" : : "This entity will be moved to mimic the motions of Entity to Measure."
	targetreference(target_destination) : "Movement Reference" : : "The Entity to Move will move relative to this entity."
	targetscale(float) : "Movement scale" : 1 : "A scale to divide the measured movements by, before applying those movements to the Entity to Move. " +
		"1 = target entity moves as much as the measured entity, " +
		"2 = target entity moves half as far as the measured entity, and " +
		"0.5 = target entity moves twice as far as the measured entity."
	ShouldOutputPosition(boolean) : "Fire position outputs" : 0 : "Allows OutPosition and OutAngles to be fired " +
		"with the resulting position while this entity is active. Does not apply to the GetPosition input."

	measuretype[engine](boolean) : "Measurement Type" : 0
	measuretype(choices) : "Measurement Type" : 0 =
		[
		0: "Position"
		1: "Eye position"
		2 : "Attachment point"
		]

	spawnflags(Flags) = 
	[
		1 : "Ignore X" : 0
		2 : "Ignore Y" : 0
		4 : "Ignore Z" : 0
		8 : "Use 'Ignore' flags for origin instead of angles" : 0
		16 : "Use new teleportation rules (smoother movement)" : 1
		32 : "Don't change target's angles" : 0
	]

	MeasureAttachment(string) : "Measurement Attachment" : "" : "Only useful for the ''Attachment point'' measurement type. " +
		"This attachment should be on the Entity to Measure and measurements will correspond to its position and angles."
	

	// Inputs
	input SetMeasureTarget(string) : "Set the Entity to Measure, whose movement should be measured."
	input SetMeasureReference(string) : "Set the Measure Reference entity."
	input Target(string) : "Set the Entity to Move, which will be moved to mimic the measured entity."
	input SetTargetReference(string) : "Set the Movement Reference entity."
	input SetTargetScale(float) : "Set the scale to divide the measured movements by."
	input SetMeasureType(integer) : "Sets the measurement type."
	input SetMeasureAttachment(string) : "Sets the measurement attachment."
	input ShouldOutputPosition(bool) : "Sets whether we are allowed to fire position outputs while this entity is active."
	input GetPosition(void) : "Initiates a single measurement with the current settings, only firing OutPosition and OutAngles without moving anything. (it doesn't need a target to be available)\n"+
								     "This input ignores the 'Fire position outputs' keyvalue and instead repurposes it to modify who the outputs' activator should be.\n"+
								     "If 'Fire position outputs' is enabled, the target will be used as the activator if it is available.\n"+
								     "If 'Fire position outputs' is disabled, the activator that fired GetPosition will be used instead."
	input Enable(void) : "Enable the logic_measure_movement."
	input Disable(void) : "Disable the logic_measure_movement."
	
	// Outputs
	output OutPosition(vector)  : "Outputs the resulting position when allowed."
	output OutAngles(vector)  : "Outputs the resulting angles when allowed."
	]
