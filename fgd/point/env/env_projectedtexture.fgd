@PointClass base(BaseEntityPoint, SystemLevelChoice)
	appliesto(!MESA) // Commented out?
	// size(-2 -2 -2, 2 2 2)
	frustum(lightfov, nearz, farz, lightcolor, -1)
	studio("models/editor/cone_helper.mdl")
	iconsprite("editor/env_projectedtexture")
	line(255 255 255, targetname, target)
	sphere(nearz)
	sphere(farz)
= env_projectedtexture: "Projected texture entity."
	[
	spawnflags(flags)  =
		[
		1: "Enabled" : 1
		2: "Always Update (moving light)" : 0 [since_ASW, MBase]
		]

	target(target_destination) : "target" : : "target"
	dontfollowtarget[MBase](boolean) : "Don't Follow Target" : 0 : "Prevents this entity from trying to point at its target, if it has one. Intended for when you want to use 'Light Only Target' without the entity trying to point to it."
	lightfov(float) : "FOV" : 90.0 : "FOV"
	nearz(float) : "NearZ" : 4.0 : "Specifies the distance at which shadow casting begins. Ideally increase this until just before any objects." 
	farz(float) : "FarZ" : 750.0 : "Specifies the distance at which shadow casting finishes. Increase this to cover the most distant surfaces."

	enableshadows(boolean) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture."

	shadowquality[engine](integer) : "Shadow Quality" : 1
	shadowquality(choices) : "Shadow Quality" : 1 : "Quality of shadows." =
		[
		0: "Low"
		1: "High"
		]
	shadowfilter[MBase](float) : "Shadow Filter Size" : "0.5" : "The amount to filter the shadows. This blurs shadows to make them appear less pixelated, but higher values may have more visible noise."
	
	lightonlytarget(boolean) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity."
	lightworld(boolean) : "Light World" : 1 : "Control whether flashlight effects static world geometry."
	simpleprojection[since_ASW](boolean) : "Simple Projection" : 0 : "Indicates if this is a simple, non-light casting texture projection"

	lightcolor[!since_ASW](color255) : "Light Color (RGBA)" : "255 255 255 200" : "Light Color. The fourth value is the alpha, and is limited to 0-255."
	lightcolor[since_ASW](color255) : "Light Color (RGBA)" : "255 255 255 200" : "Light Color. The fourth value is the alpha, and is limited to 0-255. Use Brightness Scale to make it brighter."
	brightnessscale[since_ASW](float) : "Brightness Scale" : 1.0 : "Scale the light color by this brightness."

	cameraspace(boolean) : "Camera Space" : 0 : "If set, the proected texture matches the player's orientation. A target entity must be set - the projected texture orbits around that entity based on its real distance from the target."

	colortransitiontime[since_ASW](float) : "Color Transition Speed" : 0.5 : "Controls the speed the transition takes. 1.0 means the color can change by a full 255 over 1 second."

	constant_attn[MBase, TF2](float) : "Constant" : "0" : "The light's constant attenuation, giving the light no falloff. (This value is internally corrected with x*0.5)"
	linear_attn[MBase, TF2](float) : "Linear" : "1" : "The light's linear attenuation, giving the light linear decline. This is the most common attenuation for projected textures. (This value is internally corrected with x*100)"
	quadratic_attn[MBase, TF2](float) : "Quadratic" : "0" : "The light's quadratic attenuation, giving the light exponentially decreasing falloff. (This value is internally corrected with x*10000)"
	shadowatten[MBase, TF2](float) : "Shadow Atten" : "0.0" : "The attenuation of the shadows, " +
		"or how much the shadows should fade into the light of the projected texture, if at all. " +
		"The player's flashlight uses 0.35 by default, " +
		"although higher values may be needed for a visible effect."

	// Extension type to tell code what this is, converted to material in exports.
	texturename(texture) : "Texture Name" : "effects/flashlight001" : "VTF Texture to 'project' onto the enviroment. " + 
		"Please note that env_projectedtexture uses .vtf files directly and does not use .vmt files. " +
		"The material browser is only available here to assist with finding textures since materials typically have the same name as their textures."
	textureframe(integer) : "Texture Frame" : 0 : "If the VTF is multi-frame, specify the frame to use."

	alwaysdraw[MBase](boolean)	: "Always Draw" : 0 : "Always draws the projected texture, regardless of whether the player can see its frustum. Use this for projected textures that can be seen on monitors or in the skybox."
	ProjectedTextureVersion[MBase](integer) readonly : "Projected Texture Version" : 1  : "(Don't change). Differentiates between projected textures built before/outside of Mapbase and projected textures using new features."

	style[engine](integer) : "Appearance" : 0
	style[since_P2](choices) : "Appearance" : "0" = #snippet LightStyle

	pattern[since_P2](string) : "Custom Appearance" : : "Set a custom pattern of light brightness for this light. " +
		"Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. " +
		"i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	lightviewmodels[INFRA](boolean) : "Light View Models" : 1 : "Control whether flashlight effects view models."
	lightnotpvsculled[INFRA](boolean) : "Light Not PVS Culled" : 0 : "Disable PVS culling optimization for this light (you shouldn't do this unless it's explicitly causing problems)."

	// Inputs
	input TurnOn(void) : "Turn on the texture"
	input TurnOff(void) : "Turn off the texture"

	input SetFOV[!P2, !MBase](float) : "Set FOV"
	input FOV[P2, MBase](float) : "Set FOV of projection."

	input Target(target_destination): "Set a new target entity to point at."
	input CameraSpace(boolean): "Set Camera Space."

	input AlwaysUpdateOn[since_ASW, MBase](void) : "Turn on per frame updating (for moving lights)"
	input AlwaysUpdateOff[since_ASW, MBase](void) : "Turn off per frame updating (for moving lights)"

	// Disabled by Valve in the code, emits console message.
	input SpotlightTexture[!CSGO, !P2](string) : "Set the spotlight texture"

	input EnableShadows(boolean) : "Set if the shadows are enabled."
	input LightColor[since_ASW, MBase](color255) : "Change the light color/brightness"
	input SetLightStyle[since_P2](integer) : "Change the lightstyle (see Appearance field for possible values)."
	input SetPattern[since_P2](string) : "Set a custom pattern of light brightness for this light. " +
		"The Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. " +
		"'aaggnnttzz' would be a steppy fade in from dark to light."
	input SetBrightness[MBase](float) : "Sets brightness."
	input SetColorTransitionTime[MBase](float)	: "Sets the color transition time."

	input SetConstant[MBase](float)    : "Sets the constant attenuation."
	input SetLinear[MBase](float)      : "Sets the linear attenuation."
	input SetQuadratic[MBase](float)   : "Sets the quadratic attenuation."
	input SetFilter[MBase](float)      : "Sets the shadow filter."
	input SetShadowAtten[MBase](float) : "Sets the shadow attenuation."
	input SetSpotlightFrame[MBase](string) : "Sets the spotlight texture frame."
	input AlwaysDrawOn[MBase](void) : "Turns off BBox culling (for skybox or monitor lights)"
	input AlwaysDrawOff[MBase](void) : "Turns on BBox culling if it was off before"
	input StopFollowingTarget[MBase](void)	: "Causes this entity to stop following the target, if it has one"
	input StartFollowingTarget[MBase](void) : "Causes this entity to start following the target if it was set to not follow it before"

	input SetNearZ[since_P2](float) : "Sets the near Z distance."
	input SetFarZ[since_P2](float) : "Sets the far Z distance."
	input LightOnlyTarget[INFRA](bool) : "Set if the projected texture lights the target only."
	input LightWorld[INFRA](bool) : "Set if the projected texture lights the world and static geometry."
	input Ambient[GMod, INFRA](float) : "Set ambient light amount"

	@resources []
	]
