@PointClass base(BaseEntityPoint, SystemLevelChoice)
	size(-2 -2 -2, 2 2 2)
	frustum(lightfov, nearz, farz, lightcolor, -1)
	studio("models/editor/cone_helper.mdl")
	iconsprite("editor/env_projectedtexture")
	line(255 255 255, targetname, target)
	sphere(nearz)
	sphere(farz)
= env_projectedtexture: "Projected texture entity."
	[
	spawnflags(flags)  =
		[
		1: "Enabled" : 1
		2: "Always Update (moving light)" : 0
		]

	target(target_destination) : "target" : : "target"
	lightfov(float) : "FOV" : 90.0 : "FOV"
	nearz(float) : "NearZ" : 4.0 : "Near Z for projected texture"
	farz(float) : "FarZ" : 750.0 : "Far Z for projected texture"

	enableshadows(boolean) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture."

	shadowquality[engine](integer) : "Shadow Quality" : 1
	shadowquality(choices) : "Shadow Quality" : 1 : "Quality of shadows." =
		[
		0: "Low"
		1: "High"
		]

	lightonlytarget(boolean) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity."
	lightworld(boolean) : "Light World" : 0 : "Control whether flashlight effects static world geometry."
	simpleprojection(boolean) : "Simple Projection" : 0 : "Indicates if this is a simple, non-light casting texture projection"

	lightcolor(color255) : "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	brightnessscale(float) : "Brightness Scale" : 1.0 : "Scale the light color by this brightness"

	cameraspace(boolean) : "Camera Space" : 0 : "Angles are interpreted as being relative to camera."

	// not implemented
	//ambient(float) : "Ambient" 0.0 : "Controls light ambient."

	constant_attn[MBase, TF2](float) : "Constant" : "0" : "The light's constant attenuation, giving the light no falloff. (This value is internally corrected with x*0.5)"
	linear_attn[MBase, TF2](float) : "Linear" : "1" : "The light's linear attenuation, giving the light linear decline. This is the most common attenuation for projected textures. (This value is internally corrected with x*100)"
	quadratic_attn[MBase, TF2](float) : "Quadratic" : "0" : "The light's quadratic attenuation, giving the light exponentially decreasing falloff. (This value is internally corrected with x*10000)"
	shadowatten[MBase, TF2](float) : "Shadow Atten" : "0.0" : "The attenuation of the shadows, " +
		"or how much the shadows should fade into the light of the projected texture, if at all. " +
		"The player's flashlight uses 0.35 by default, " +
		"although higher values may be needed for a visible effect."
	colortransitiontime(float) : "Color Transition Time" : 0.5 : "Amount of time it takes for a color change to occur."

	texturename(material) : "Texture Name" : "effects/flashlight001" : "VTF Texture to 'project' onto the enviroment. " + 
		"Please note that env_projectedtexture uses .vtf files directly and does not use .vmt files. " +
		"The material browser is only available here to assist with finding textures since materials typically have the same name as their textures."
	textureframe(integer) : "Texture Frame" : 0 : "If the VTF is multi-frame, specify the frame to use."

	volumetric[P2CE](boolean) : "Enable Volumetrics" : 0 : "Enables/disables volumetrics from this projected texture."
	volumetricintensity[P2CE](float) : "Volumetric Intensity" : "1.0" : "Sets the intensity of the volumetric lighting."
	
	style[engine](integer) : "Appearance" : 0
	style(choices) : "Appearance" : "0" =
		[
		0: "Normal"
		10: "Fluorescent flicker"
		2: "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5: "Gentle pulse"
		1: "Flicker A"
		6: "Flicker B"
		3: "Candle A"
		7: "Candle B"
		8: "Candle C"
		4: "Fast strobe"
		9: "Slow strobe"
		]

	pattern(string) : "Custom Appearance" : : "Set a custom pattern of light brightness for this light. " +
		"Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. " +
		"i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."

	// Inputs
	input TurnOn(void) : "Turn on the texture"
	input TurnOff(void) : "Turn off the texture"

	input SetFOV[!P2](float) : "Set FOV"
	input FOV[P2](float) : "Set FOV of projection."

	input Target(target_destination): "Set a new target entity to point at."
	input CameraSpace(boolean): "Set Camera Space."

	input AlwaysUpdateOn(void) : "Turn on per frame updating (for moving lights)"
	input AlwaysUpdateOff(void) : "Turn off per frame updating (for moving lights)"

	// Disabled by Valve in the code, emits console message.
	input SpotlightTexture[!CSGO, !P2](string) : "Set the spotlight texture"

	input EnableShadows(boolean) : "Set if the shadows are enabled."
	input SetLightStyle[since_P2](integer) : "Change the lightstyle (see Appearance field for possible values)."
	input SetPattern[since_P2](string) : "Set a custom pattern of light brightness for this light. " +
	input LightColor(color255) : "Change the light color/brightness"
		"The Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. " +
		"'aaggnnttzz' would be a steppy fade in from dark to light."

	input SetConstant[MBase](float)    : "Sets the constant attenuation."
	input SetLinear[MBase](float)      : "Sets the linear attenuation."
	input SetQuadratic[MBase](float)   : "Sets the quadratic attenuation."
	input SetShadowAtten[MBase](float) : "Sets the shadow attenuation."

	input SetNearZ[since_P2](float) : "Sets the near Z distance."
	input SetFarZ[since_P2](float) : "Sets the far Z distance."
	input LightOnlyTarget(bool) : "Set if the projected texture lights the target only."
	input LightWorld(bool) : "Set if the projected texture lights the world and static geometry."

	// not implemented
	//input Ambient(float) : "Set ambient light amount"
	
	input EnableVolumetrics[P2CE](boolean) : "Set if the volumetrics are enabled."
	input SetVolumetricIntensity[P2CE](float) : "Sets the volumetric lighting's intensity."

	input SetBrightnessScale[P2CE](float) : "Sets the brightness."
	]
