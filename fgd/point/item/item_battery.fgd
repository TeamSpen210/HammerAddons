@BaseClass appliesto(-mesa, -MBase, -EZ2) studioprop("models/items/battery.mdl") = _item_battery_hl2 []
@BaseClass appliesto(-mesa, +MBase, -EZ2) studioprop() = _item_battery_mbase []
@BaseClass appliesto(-mesa, -MBase, -EZ2) studioprop("models/items/battery.mdl") = _item_battery_ez2 []
@BaseClass appliesto(+mesa) studioprop("models/weapons/w_battery.mdl") = _item_battery_mesa []

@PointClass base(Item, BaseMesaPickup) 
	appliesto(EP1, EP2, HL2, P1, Mesa) 
	base(_item_battery_hl2, _item_battery_mbase, _item_battery_ez2, _item_battery_mesa)
= item_battery: "HEV battery"
	[
	PowerMultiplier[MBase](float) : "Power Multiplier" : "1.0" : "Multiplies the amount of armor this item gives."
	// Mapbase makes this customisable, but EZ2 removes that.
	model[MBase, -EZ2](studio) : "Model" : "models/items/battery.mdl" : "The battery's model."
	
	// Inputs
	input SetPowerMultiplier[MBase](float) : "Sets the multiplier for the amount of armor this item gives."

	@resources
		[
		model "models/items/battery.mdl" [-Mbase, -entropyzero2] // Taken case of by model keyvalue.
		sound "ItemBattery.Touch"
    	func item_battery [+entropyzero2] // EZ2 has multiple variants.
		]
	]
