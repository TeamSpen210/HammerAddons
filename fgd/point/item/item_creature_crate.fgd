@PointClass base(item_item_crate) 
	appliesto(EZ2)
= item_creature_crate: "Creature Crate"
	[
	model[MBase](studio) report: "Model" : "models/animal_box/animal_box.mdl" : "The model of this item_creature_crate. Only works when this crate's appearance is set to use a custom model."

	idlesound(sound) : "Sound Name" : "NPC_PitDrone.Idle" : "Idle soundscript for the crate to play every 5 to 20 seconds."
	
	// Overriding the EZVariant property to change the default to Xen
	EZvariant[engine](integer) : "Variant" : 1
	EZvariant(choices) : "Variant" : 1 : "Sets this entity's 'variant', e.g. slimy zombies that create radioactive puddles." =
		[
		0 : "Default"
		1 : "Xen"
		2 : "Radioactive/Slimy"
		3 : "Temporal"
		4 : "Arbeit"
		]

	crateappearance[engine](integer) : "Crate Appearance" : 0
	crateappearance(choices) : "Crate Appearance" : 0 =
		[
		0: "Default Appearance"
		1: "Radar Beacon Crate"
		2 : "Custom Model (use model keyvalue)" [MBase]
		]

	itemclass(pointentityclass) : "Item Type" : "item_dynamic_resupply" : "Class name of the entity to spawn when the crate is broken"
	itemcount(integer) : "Item Count" : 1 : "Number of items to emit upon breakage"
	specificresupply[!MBase](target_destination) : "Specific resupply" : : "If item type is item_dynamic_resupply, specify a specific one to use instead of the master"
	SpecificResupply[MBase](target_destination) : "Specific resupply/Target template" : "" : "If item type is item_dynamic_resupply, specify a specific one to use instead of the master. If the crate contains a point_template, this is required to specify which point_template to spawn."

	// Inputs
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for health. If the crate's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the crate. If the crate's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the crate. If the crate's health reaches zero it will break."

	input SetContents[MBase](string) : "Sets the crate's contents. (e.g. its specified item)"
	input SetItemCount[MBase](string) : "Sets the item count."
	input MergeContentsWithPlayer[MBase](target_destination) : "Gives whatever the crate contains to a player without doing anything to the crate itself. " +
		"NOTE: This does not actually change the crate's contents on its own, if you want the crate to be empty after merging with a player, " +
		"you must use SetItemCount or SetContents as well. (This input is also currently unsupported with template crates.)"
	
	// Outputs
	output OnBreak(void) : "Fires when broken."
	output OnHealthChanged(float) : "Fires when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."
	output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this crate. Fires on: Picked up by +USE, Picked up by Physcannon, Punted by Physcannon, Broken."

	output OnItem[MBase](ehandle) : "Fires for each item spawned by this crate."

	@resources
		[
		particle "creaturecrate_stasisbreak"
		]
	]
