@BaseClass base(BaseEntityPoint) 
	line(255 255 255, targetname, lightingorigin)
= gibshooterbase
	[
	angles(angle) : "Gib Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the gibs will fly."
	m_igibs(integer) : "Number of Gibs" : 3 : "Total number of gibs to shoot each time it's activated."
	delay(float) : "Delay between shots" : 0 : "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once."

	gibangles(angle) : "Gib Angles (Pitch Yaw Roll)" : "0 0 0" : "The orientation of the spawned gibs."

	gibanglevelocity(float) : "Max angular velocity" : 0 : "How fast (degrees/sec) the gib pieces should spin. " +
		"They will spin on x and y axis at between 10% and 100% of this speed."

	m_flvelocity(integer) : "Gib Velocity" : 200 : "Speed of the fired gibs."
	m_flvariance(float) : "Course Variance" : "0.15" : "How much variance in the direction gibs are fired."
	m_flgiblife(float) : "Gib Life" : 4 : "Time in seconds for gibs to live +/- 5%."

	simulation[engine](integer) : "Simulate"
	simulation(choices) : "Simulate" : "0" =
		[
		0: "Point"
		1: "Physics"
		2: "Ragdoll"
		]

	lightingorigin(target_destination) : "Lighting Origin" : : "Select an info_lighting to specify a location to sample lighting from " +
		"for all gibs spawned by this shooter, instead of their own origins."
	spawnflags(flags)  =
		[
		1: "Repeatable" : 0
		]

	// Inputs
	input Shoot(void) : "Force the gibshooter to create and shoot a gib."
	]
