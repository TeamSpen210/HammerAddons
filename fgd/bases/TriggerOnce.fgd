// Exclude a bunch of outputs and options for trigger_once, since they're not useful.
// OnEndTouch for instance can never be fired since it'll die first.
@BaseClass base(BaseEntityBrush)
	line(255 255 255, targetname, filtername) 
= TriggerOnce
	[
	spawnflags(flags)  =
		[
		1: "Clients (Players/Bots)" : 1 [2025MP, CSGO, MESA]
		1: "Clients (Players)" : 1 [!2025MP, !CSGO, !MESA]
		2: "NPCs" : 0 [!ASW]
		2: "Marines and Aliens" : 0 [ASW]
		4: "func_pushable" : 0
		8: "VPhysics Objects" : 0
		8192: "Items (weapons, items, projectiles)" : 0 [MBase]
		16: "Only player ally NPCs" : 0 [!ASW]
		16: "Only marines" : 1 [ASW]
		32: "Only clients in vehicles" : 0
		64: "Everything (not including physics debris)" : 0
		512: "Only clients *not* in vehicles" : 0 [!ASW]
		1024: "Physics debris" : 0
		2048: "Only NPCs in vehicles (respects player ally flag)" : 0
		4096: "Disallow Bots" : 0 [CSGO, 2025MP, MESA]
		]

	StartDisabled(boolean) : "Start Disabled?" : 0
	filtername(filterclass) : "Filter Name" : : "A filter entity to test potential activators against."
	
	// Inputs
	input Enable(void) : "Enable this trigger."
	input Disable(void) : "Disable this trigger, some trigger entities may also fire OnEndTouch when disabled."
	input Toggle(void) : "Toggles this trigger between enabled and disabled states." 
	input TouchTest(void) : "Triggers either the OnTouching or OnNotTouching outputs for whether anything is touching this entity."

    input StartTouch(void) : "Fires the OnStartTouch output. " +
    	"If called by an entity inside the trigger, the OnStartTouch will be fired for them as the activator. Note that this input is passed even if the player is being treated as 'not' touching the trigger while inside it."

	input EnableRetouch[KZ](void) : "Enables the activating player to re-trigger this trigger if it's an only activate once trigger."
	input PreventTouch[KZ](void) : "Prevents the activating player from triggering if it's an only activate once trigger." 

	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is activated."
	output OnTriggerMale[KZ](void) : "Fired when the trigger is activated by a player with a male model."
	output OnTriggerFemale[KZ](void) : "Fired when the trigger is activated by a player with a female model."
	output OnTriggerCheckpointsUsed[KZ](void) : "Fired when the trigger is activated by a player who has used checkpoints on their current course. Does not fire if the player is not currently on a course."
	output OnTriggerCheckpointsNotUsed[KZ](void) : "Fired when the trigger is activated by a player who has not used checkpoints on their current course so far. Does not fire if the player is not currently on a course."
	output OnTriggerCheckpointsSet[KZ](void) : "Fired when the trigger is activated by a player who has set checkpoints. Will fire even if a player is not on a course."
	output OnTriggerCheckpointsNotSet[KZ](void) : "Fired when the trigger is activated by a player who has not set checkpoints. Will fire even if a player is not on a course."
	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. " +
		"The touching entity must pass this trigger's filters to cause this output to fire."
	output OnTouching(void) : "Fired when the TouchTest input is called, and an entity is touching this. Does not call activators."
    output OnNotTouching(void) : "Fired when the TouchTest input is called, and no entity is touching this. Does not call activators."
	
    // This I/O does actually exist, but it couldn't ever be used usefully. 
    // Entities that can use them should inherit Trigger instead.
    input EndTouch[engine](void)
	input DisableAndEndTouch[2025MP, engine](void)
	output OnStartTouchAll[engine](void) // Always fires along with OnStartTouch, so useless.
	output OnEndTouch[engine](void)
	output OnEndTouchAll[engine](void)
	]
