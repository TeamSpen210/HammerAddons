@SolidClass base(Trigger, MasterEnt, DamageType) 
= trigger_hurt: "A trigger volume that damages entities that touch it."
	[
	damage(integer) : "Damage" : 20 : "The amount of damage done to entities that touch this trigger. " +
		"The damage is done every half-second. See also 'Damage Model' for extra details on how damage can be dealt."

	// No visible health, most triggers should instakill.
	damage[P1, P2](integer) : "Damage" : 100000 : "The amount of damage done to entities that touch this trigger. " +
		"The damage is done every half-second. See also 'Damage Model' for extra details on how damage can be dealt."

	damagecap(integer) : "Damage Cap" : 20 : "The maximum amount of damage that can be dealt when using the Doubling w/Forgiveness damage model."

	damagemodel[engine](integer) : "Damage Model" : 0
	damagemodel(choices) : "Damage Model" : 0 : "How damage is dealt. Normal always does the specified amount of damage each half second. " +
		"Doubling w/Forgiveness starts with the specified amount and doubles it each time it hurts the toucher, resetting when they leave the trigger. " +
		"Good for making triggers that are deadly over time, without having to cause massive damage on each touch." =
		[
		0: "Normal"
		1: "Doubling w/forgiveness"
		]

	nodmgforce(boolean) : "Zero Damage Force" : 0 : "Should the damaged entity receive no physics force from this trigger."

	hurtrate[MBase](float) : "Hurt Rate" : "0.5" : "Touchers will be hurt every X seconds while in this trigger_hurt."

	// Inputs
	input SetDamage(float) : "Set a new amount of damage for this trigger."

	// Outputs
	output OnHurt(void) : "Fired whenever this trigger hurts something other than a player."
	output OnHurtPlayer(void) : "Fired whenever this trigger hurts a player."
	]
